"""
Django settings for cms_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Determine BASE_DIR dynamically for PyInstaller
if getattr(sys, 'frozen', False): # Check if running as a PyInstaller executable
    # If frozen, BASE_DIR is the directory containing the executable's extracted files.
    # sys._MEIPASS is PyInstaller's temp folder for bundled files
    BASE_DIR = Path(sys._MEIPASS) if hasattr(sys, '_MEIPASS') else Path(os.path.dirname(sys.executable))
    print(f"Running as PyInstaller bundle. BASE_DIR set to: {BASE_DIR}")
else:
    # Otherwise, use the standard Django BASE_DIR
    BASE_DIR = Path(__file__).resolve().parent.parent
    print(f"Running in development/standard mode. BASE_DIR set to: {BASE_DIR}")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-%qtmijf8v7__$w*0op7f_#ft182oi)szp6-nmy+*u33cgvg=l=')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'


# IMPORTANT: ALLOWED_HOSTS for Render.com and local/PyInstaller
if getattr(sys, 'frozen', False): # For PyInstaller executable
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
elif os.environ.get('RENDER', 'False').lower() == 'true': # For Render.com deployment
    ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME')] # Render sets this env var
else: # For local development
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crew_management',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cms_project.urls'

# --- TEMPLATES Configuration: Explicitly define DIRS for PyInstaller ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # When frozen, templates are copied relative to BASE_DIR (sys._MEIPASS or executable dir)
            # So, we point directly to where PyInstaller puts the 'templates' folder of your app.
            BASE_DIR / 'crew_management' / 'templates', # <--- NEW/MODIFIED LINE
            BASE_DIR / 'users' / 'templates', # <--- NEW/MODIFIED LINE (if users app has templates)
        ],
        'APP_DIRS': True, # Keep APP_DIRS True for standard Django discovery, but DIRS takes precedence.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'cms_project.wsgi.application'


# Database
import dj_database_url

if getattr(sys, 'frozen', False): # For PyInstaller executable, use SQLite always
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3', # SQLite DB path relative to executable
        }
    }
else: # For Render or local dev
    DATABASES = {
        'default': dj_database_url.config(
            default='sqlite:///db.sqlite3', # Local default
            conn_max_age=600
        )
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/' 
if getattr(sys, 'frozen', False):
    STATIC_ROOT = BASE_DIR / 'static_assets' # PyInstaller bundles static files here
else:
    STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'crew_management' / 'static', # For development: looks inside crew_management/static
]

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (for uploaded user content)
MEDIA_URL = '/media/'
if getattr(sys, 'frozen', False):
    # When frozen, media files should be writable, so they are relative to executable's run location
    MEDIA_ROOT = Path(os.path.join(os.path.dirname(sys.executable), 'media_data'))
else:
    MEDIA_ROOT = BASE_DIR / 'media'


# Authentication settings
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

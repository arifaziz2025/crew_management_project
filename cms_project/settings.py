"""
    Django settings for cms_project project.

    Generated by 'django-admin startproject' using Django 5.2.1.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    # Determine BASE_DIR dynamically for PyInstaller
if getattr(sys, 'frozen', False): # Check if running as a PyInstaller executable
        # If frozen, BASE_DIR points to the executable's *extraction directory*.
        APP_ROOT_DIR = Path(os.path.dirname(sys.executable)) # Actual folder where the .exe is
        BASE_DIR = Path(sys._MEIPASS) if hasattr(sys, '_MEIPASS') else APP_ROOT_DIR # PyInstaller's temp extraction dir
        print(f"Running as PyInstaller bundle. APP_ROOT_DIR: {APP_ROOT_DIR}, BASE_DIR set to: {BASE_DIR}")
else:
        # Otherwise, use the standard Django BASE_DIR for local development/Render.
        BASE_DIR = Path(__file__).resolve().parent.parent
        APP_ROOT_DIR = BASE_DIR # In non-frozen mode, APP_ROOT_DIR is the same as BASE_DIR
        print(f"Running in development/standard mode. BASE_DIR set to: {BASE_DIR}")


    # Quick-start development settings - unsuitable for production
    # SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-%qtmijf8v7__$w*0op7f_#ft182oi)szp6-nmy+*u33cgvg=l=')

    # SECURITY WARNING: don't run with debug turned on in production!
    # Set DEBUG to False for PyInstaller executable always
if getattr(sys, 'frozen', False):
        DEBUG = False
else:
        # For local development or Render, use environment variable
        DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'


    # IMPORTANT: ALLOWED_HOSTS for Render.com and local/PyInstaller
if getattr(sys, 'frozen', False): # For PyInstaller executable
        ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
elif os.environ.get('RENDER', 'False').lower() == 'true': # For Render.com deployment
        ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME')]
else: # For local development
        ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


    # Application definition
INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'crew_management',
        'users',
    ]

MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

ROOT_URLCONF = 'cms_project.urls'

    # --- TEMPLATES Configuration: Explicitly define DIRS for PyInstaller ---

TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                # When frozen, templates are copied relative to BASE_DIR (sys._MEIPASS)
                BASE_DIR / 'crew_management' / 'templates',
                BASE_DIR / 'users' / 'templates',
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'django.template.context_processors.media',
                ],
            },
        },
    ]

WSGI_APPLICATION = 'cms_project.wsgi.application'


    # Database
import dj_database_url

    # --- Define a common DATA_DIR for persistent database and media files ---

if getattr(sys, 'frozen', False):
        # For PyInstaller executable, store data next to the executable itself
        DATA_DIR = APP_ROOT_DIR / '_app_data' # A folder that will live next to the exe
        os.makedirs(DATA_DIR, exist_ok=True) # Ensure this directory exists
else:
        # For local development or Render, use standard BASE_DIR
        DATA_DIR = BASE_DIR / 'data' # You can choose a different path for local if preferred



if getattr(sys, 'frozen', False): # For PyInstaller executable, use SQLite always
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': DATA_DIR / 'db.sqlite3', # SQLite DB path now points to DATA_DIR
            }
        }
else: # For Render or local dev
        DATABASES = {
            'default': dj_database_url.config(
                default='sqlite:///' + str(DATA_DIR / 'db.sqlite3'), # Local default now uses DATA_DIR
                conn_max_age=600
            )
        }

    # Password validation (No changes expected here unless specified otherwise)
AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


    # Static files (CSS, JavaScript, Images)

STATIC_URL = '/static/'

if getattr(sys, 'frozen', False):
        STATIC_ROOT = BASE_DIR / 'static_assets' # PyInstaller bundles static files here

else:
        STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
        BASE_DIR / 'crew_management' / 'static', # For development: looks inside crew_management/static
    ]

    # WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


    # Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Media files (for uploaded user content)
MEDIA_URL = '/media/'

if getattr(sys, 'frozen', False):
        MEDIA_ROOT = DATA_DIR / 'media_data' # Media files also point to DATA_DIR

else:
        MEDIA_ROOT = BASE_DIR / 'media'


    # Authentication settings
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

    # --- NEW: Session and CSRF Security for Standalone (when DEBUG is False) ---
    # These settings are crucial when DEBUG is False for security and proper cookie handling
    # They should generally be False/None for local 127.0.0.1 or HTTP for a standalone app
    # unless you explicitly configure HTTPS for local (which is rare).
CSRF_COOKIE_SECURE = False # Must be False for HTTP (local dev/standalone)
SESSION_COOKIE_SECURE = False # Must be False for HTTP (local dev/standalone)
SECURE_SSL_REDIRECT = False # Must be False for HTTP (local dev/standalone)

    # SECURE_HSTS_SECONDS = 0 # Disable HSTS for local/dev
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    # SECURE_HSTS_PRELOAD = False

    # This ensures passwords are hashed consistently across Python versions
    # and environments, reducing "invalid credentials" due to hashing mismatches.
PASSWORD_HASHERS = [
        'django.contrib.auth.hashers.PBKDF2PasswordHasher',
        'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
        'django.contrib.auth.hashers.Argon2PasswordHasher',
        'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    ]
    